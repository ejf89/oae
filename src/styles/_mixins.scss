// 1.1 CLEAR
// 1.2 PREFIXES
// 1.3 MEDIA QUERY
// 1.4 HIDE/SHOW
// 1.5 TRANSITIONS
// 1.6 GRID
// 1.7 TEXT

/*================ Clear ================*/
@mixin clearfix() {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
  // sass-lint:disable
  *zoom: 1;
}
/*================ Clear ================*/
.clear:after { content:""; display:block; height:0; clear:both;}
.clearfix{
  @include clearfix;
}



@function list-get($list, $key) {
  @each $item in $list{
    $item-key: nth($item, 1);
    $item-value: nth($item, 2);
    @if $item-key == $key {
      @return $item-value;
    }
  }
}

/*============================================================================
Prefix mixin for generating vendor prefixes.
Based on https://github.com/thoughtbot/bourbon/blob/v4-stable/app/assets/stylesheets/addons/_prefixer.scss
Usage:
// Input:
.element {
@include prefix(transform, scale(1), ms webkit spec);
}
// Output:
.element {
-ms-transform: scale(1);
-webkit-transform: scale(1);
transform: scale(1);
}
==============================================================================*/
@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      -webkit-#{$property}: $value;
    } @else if $prefix == moz {
      -moz-#{$property}: $value;
    } @else if $prefix == ms {
      -ms-#{$property}: $value;
    } @else if $prefix == o {
      -o-#{$property}: $value;
    } @else if $prefix == spec {
      #{$property}: $value;
    } @else  {
      @warn 'Unrecognized prefix: #{$prefix}';
    }
  }
}


/* ========================================================================
Gutter
========================================================================= */

@mixin gutter(){
  padding-left: $gutter;
  padding-right: $gutter;
}



/*================ Media Query Mixin ================*/
@mixin media-query($media-query) {
  $breakpoint-found: false;
  @each $breakpoint in $breakpoints {
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);
    @if $media-query == $name and $declaration {
      $breakpoint-found: true;
      @media only screen and #{$declaration} {@content;}
    }
  }@if $breakpoint-found == false {@warn 'Breakpoint "#{$media-query}" does not exist';}
}
/*================ Responsive Show/Hide Helper ================*/
@mixin responsive-display-helper($breakpoint: '') {
  // sass-lint:disable no-important
  .#{$breakpoint}show {display: block;}
  .#{$breakpoint}hide {
    display: none !important;
    height: 0 !important;
    visibility: hidden !important;
  }
}
/*================ Responsive Text Alignment Mixin ================*/
@mixin responsive-text-align-helper($breakpoint: '') {
  // sass-lint:disable no-important
  .#{$breakpoint}text-left {text-align: left !important;}
  .#{$breakpoint}text-right {text-align: right !important;}
  .#{$breakpoint}text-center {text-align: center !important;}
}
//  ____  _    _ _____ _      _____
// |  _ \| |  | |_   _| |    |  __ \
// | |_) | |  | | | | | |    | |  | |
// |  _ <| |  | | | | | |    | |  | |
// | |_) | |__| |_| |_| |____| |__| |
// |____/ \____/|_____|______|_____/

/*================ Build Base Grid Classes ================*/;
@include responsive-display-helper();
@include responsive-text-align-helper();

/*================ Build Responsive Grid Classes ================*/
@each $breakpoint in $breakpoint-has-widths {
  @include media-query($breakpoint) {
    @include responsive-display-helper('#{$breakpoint}--');
    @include responsive-text-align-helper('#{$breakpoint}--');
  }
}


//   _____ _    _  ______          __           _    _ _____ _____  ______
//  / ____| |  | |/ __ \ \        / /   ___    | |  | |_   _|  __ \|  ____|
// | (___ | |__| | |  | \ \  /\  / /   ( _ )   | |__| | | | | |  | | |__
//  \___ \|  __  | |  | |\ \/  \/ /    / _ \/\ |  __  | | | | |  | |  __|
//  ____) | |  | | |__| | \  /\  /    | (_>  < | |  | |_| |_| |__| | |____
// |_____/|_|  |_|\____/   \/  \/      \___/\/ |_|  |_|_____|_____/|______|

/*================ Responsive Show/Hide Helper ================*/
@mixin responsive-display-helper($breakpoint: '') {
  // sass-lint:disable no-important
  //for some reason medium-up--hide and small--hide are the only one working
  .#{$breakpoint}show {
    display: block;
  }
  .#{$breakpoint}hide {
    display: none !important;
    height: 0 !important;
    visibility: hidden !important;
  }
}
/*================ visually-hidden Helper ================*/
@mixin visually-hidden() {
  // sass-lint:disable no-important
  position: absolute !important;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}
@mixin visually-shown($position: relative) {
  // sass-lint:disable no-important
  position: $position !important;
  // overflow: auto;
  clip: auto;
  width: auto;
  height: auto;
  margin: 0;
}




//  _______ _____            _   _  _____ _____ _______ _____ ____  _   _
// |__   __|  __ \     /\   | \ | |/ ____|_   _|__   __|_   _/ __ \| \ | |
//    | |  | |__) |   /  \  |  \| | (___   | |    | |    | || |  | |  \| |
//    | |  |  _  /   / /\ \ | . ` |\___ \  | |    | |    | || |  | | . ` |
//    | |  | | \ \  / ____ \| |\  |____) |_| |_   | |   _| || |__| | |\  |
//    |_|  |_|  \_\/_/    \_\_| \_|_____/|_____|  |_|  |_____\____/|_| \_|


@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}


// @mixin transition($transitions...) {
//   $unfoldedTransitions: ();
//   @each $transition in $transitions {
//     $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
//   }
//
//   -webkit-transition: $unfoldedTransitions;
//   transition: $unfoldedTransitions;
// }

@function unfoldTransition ($transition) {
  // Default values
  $property: all;
  $duration: 400ms;
  $easing: ease-in-out; // Browser default is ease, which is what we want
  $delay: 0s; // Browser default is 0, which is what we want
  $defaultProperties: ($property, $duration, $easing, $delay);

  // Grab transition properties if they exist
  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i)
    } @else {
      $p: nth($defaultProperties, $i)
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}

@mixin transform($params) {
  @include prefix(transform, $params, ("webkit", "moz"));
}

@mixin translateX($x) {
  -webkit-transform: translateX($x);
  -moz-transform: translateX($x);
  -ms-transform: translateX($x);
  -o-transform: translateX($x);
  transform: translateX($x);
}

@mixin translateY($y) {
  -webkit-transform: translateY($y);
  -moz-transform: translateY($y);
  -ms-transform: translateY($y);
  -o-transform: translateY($y);
  transform: translateY($y);
}

@mixin rotateX($x) {
  -webkit-transform: rotateX($x);
  -moz-transform: rotateX($x);
  -ms-transform: rotateX($x);
  -o-transform: rotateX($x);
  transform: rotateX($x);
}


/* ========================================================================
Overlay
========================================================================= */
@function list-get($list, $key) {
  @each $item in $list{
    $item-key: nth($item, 1);
    $item-value: nth($item, 2);
    @if $item-key == $key {
      @return $item-value;
    }
  }
}
@mixin overlay($position) {
  position: $position;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}
@mixin fullscreen-overlay{
  @include overlay(fixed);
  z-index: 100;
  background-color: rgba(#000, 0.4);
  overflow: auto;
}
.fullscreen-overlay{
  @include fullscreen-overlay;
}
